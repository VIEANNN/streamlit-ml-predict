# -*- coding: utf-8 -*-
"""tessML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sPHCByvhhmOVEebVZs_sKXn34Twvzg94
"""

import streamlit as st
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier

# Contoh DataFrame (ganti dengan data asli Anda)
data = {
    'Role': ['Jungler', 'Goldlaner', 'Explaner', 'Midlaner', 'Roamer'],
    'Winrate (%)': [57.03, 77.83, 46.46, 25.96, 67.19],
    'Highest_Rank': ['grandmaster', 'legend', 'master', 'warrior', 'epic'],
    'Match': [500, 800, 300, 100, 400],
    'Category': ['average', 'pro', 'average', 'dark system', 'average']
}
df = pd.DataFrame(data)

# Membuat LabelEncoder untuk kategori skill, role, dan rank
le_skill = LabelEncoder()
le_role = LabelEncoder()
le_rank = LabelEncoder()

# Encoding kolom dengan LabelEncoder
df['Role'] = le_role.fit_transform(df['Role'])
df['Highest_Rank'] = le_rank.fit_transform(df['Highest_Rank'])
df['Category'] = le_skill.fit_transform(df['Category'])

# Pastikan bahwa 'Winrate (%)' adalah dalam bentuk numerik
df['Winrate (%)'] = pd.to_numeric(df['Winrate (%)'], errors='coerce')

# Menyusun fitur (X) dan target (y)
X = df[['Role', 'Winrate (%)', 'Highest_Rank', 'Match']]
y = df['Category']

# Melatih model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X, y)

# Definisi Fungsi untuk Prediksi
def predict_skill_category(role_input, win_rate, rank, match, le_role, le_rank, le_skill, model):
    role_encoded = le_role.transform([role_input])[0]
    rank_encoded = le_rank.transform([rank])[0]
    input_data = pd.DataFrame([[role_encoded, win_rate, rank_encoded, match]],
                               columns=['Role', 'Winrate (%)', 'Highest_Rank', 'Match'])
    predicted_category_encoded = model.predict(input_data)
    predicted_category = le_skill.inverse_transform(predicted_category_encoded)[0]
    return predicted_category

# Antarmuka Streamlit
st.title("Prediksi Kategori Skill Mobile Legends")

# Input dari pengguna
role_input = st.selectbox("Pilih Role:", options=le_role.classes_)
win_rate_input = st.number_input("Masukkan Win Rate (dalam persen):", min_value=0.0, max_value=100.0)
rank_input = st.selectbox("Pilih Rank:", options=le_rank.classes_)
match_input = st.number_input("Masukkan Jumlah Match:", min_value=0, step=1)

# Tombol untuk melakukan prediksi
if st.button("Prediksi Kategori Skill"):
    predicted_skill = predict_skill_category(role_input, win_rate_input, rank_input, match_input, le_role, le_rank, le_skill, model)
    st.success(f"Prediksi kategori skill pengguna adalah: {predicted_skill}")